import { app, BrowserWindow, ipcMain, Menu } from 'electron';
import path from 'path';
import { IpcChannel } from './constants';
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string; //preloadスクリプトのファイルパス

import fse from 'fs-extra';

const isDevelopment = process.env.NODE_ENV !== 'production';

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) { // eslint-disable-line global-require
  app.quit();
}

let mainWindow: BrowserWindow | null = null;

const createWindow = async () => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    show: false,
    height: 200,
    width: 400,
    useContentSize: true,
    title: `VRChat Picture Organizer ver. ${app.getVersion()}`,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true,
    },
  });
  mainWindow.once('ready-to-show', async () => {
    if (!isDevelopment) Menu.setApplicationMenu(null);
    if (mainWindow != null) mainWindow.show();

    const isContainAutoInArgs = process.argv.includes('--auto');
    if (isContainAutoInArgs) {
      const result = await runFileOrganize(getShotFolderPath());
      if (mainWindow != null && !mainWindow.isDestroyed()) {
        mainWindow.webContents.send(IpcChannel.CHANNEL_ON_FINISH_FILE_ORGANIZE, result);
      }
    }
  });
  mainWindow.on('closed', () => {
    mainWindow = null;
  });

  // and load the index.html of the app.
  await mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  // Open the DevTools.
  if (isDevelopment) mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

ipcMain.handle(IpcChannel.CHANNEL_GET_FOLDER_PATH, async () => getShotFolderPath());
ipcMain.on(IpcChannel.CHANNEL_EXEC_FILE_ORGANIZE, async (event, arg) => {
  const result = await runFileOrganize(arg.folderPath);
  if (mainWindow != null && !mainWindow.isDestroyed()) {
    mainWindow.webContents.send(IpcChannel.CHANNEL_ON_FINISH_FILE_ORGANIZE, result);
  }
});
ipcMain.on(IpcChannel.CHANNEL_SAVE_SETTINGS, async (event, arg) => {
  try {
    await fse.outputJson(getSettingsJsonFilePath(), arg);
    if (mainWindow != null && !mainWindow.isDestroyed()) {
      event.reply(IpcChannel.CHANNEL_ON_SAVE_SETTINGS, {isSucceeded: true});
    }
  } catch (err) {
    console.error(err)
    if (mainWindow != null && !mainWindow.isDestroyed()) {
      event.reply(IpcChannel.CHANNEL_ON_SAVE_SETTINGS, {isSucceeded: false});
    }
  }
});

/**
 * 設定ファイル(JSON)のpathを返す
 * pathは実行パス配下の/settings/settings.json
 */
const getSettingsJsonFilePath = () => {
  if (isDevelopment) {
    return path.join(__dirname, '../../settings/settings.json');
  } else {
    return path.join(app.getPath('exe'), '../settings/settings.json');
  }
}
/**
 * 画像が保存されているフォルダのpathを返す
 * 設定ファイルが存在する場合は設定ファイルの値、存在しない場合はデフォルトのpath
 * @returns 画像が保存されているフォルダのpath（絶対path）
 */
const getShotFolderPath = () => {
  // 設定ファイル参照
  const data = fse.readJsonSync(getSettingsJsonFilePath(), { throws: false });
  // 取得できたら設定値を参照、できない場合はデフォルト値
  return (data != null ? data.folderPath : app.getPath('pictures') + '\\VRChat') as string;
}
const runFileOrganize = async (folderPath: string) => {
  console.debug('=== exec_file_organize start ===');
  let succeededCount = 0;
  let failedCount = 0;

  const topDirents = await fse.readdir(folderPath, {withFileTypes: true});
  for (const topDirent of topDirents) {
    if (topDirent.isDirectory() && /^\d{4}-\d{2}$/.test(topDirent.name)) {
      // VRCはYYYY-MMの形式で画像を分類して保存するため、そのフォルダ内をさらに探索
      const yearMonthDirPath = folderPath + '\\' + topDirent.name;
      const yearMonthDirents = await fse.readdir(yearMonthDirPath, {withFileTypes: true});
      for (const yearMonthDirent of yearMonthDirents) {
        if (yearMonthDirent.isFile() && /.png$/.test(yearMonthDirent.name)) {
          const dateStr = yearMonthDirent.name.match(/\d{4}-\d{2}-\d{2}/g);
          const srcFullPath = yearMonthDirPath + '\\' + yearMonthDirent.name;
          const destFullPath = yearMonthDirPath + '\\' + dateStr + '\\' + yearMonthDirent.name;

          // ファイル移動実行
          try {
            await fse.move(srcFullPath, destFullPath);
            succeededCount++;
          } catch (err) {
            console.error(err);
            failedCount++;
          }
        }
      }
    }
  }

  console.debug('=== exec_file_organize end ===');
  return {successCount: succeededCount, failCount: failedCount};
}